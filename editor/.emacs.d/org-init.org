#+STARTUP: overview

* Navigation
** avy
    avy is a GNU Emacs package for jumping to visible text using a char-based decision tree. To search the buffer with avy use "M-s".
    #+BEGIN_SRC emacs-lisp
    (use-package avy
    :ensure t
    :bind ("M-s" . avy-goto-char))
    #+END_SRC
** ace-window
    ace-window is a package to jump between nubered windows with "C-x o" when at least three windows are open.
    #+BEGIN_SRC emacs-lisp
    (use-package ace-window
        :ensure t
        :init
        (progn
        (global-set-key [remap other-window] 'ace-window)
        ;; Make the numbers larger
        (custom-set-faces
        '(aw-leading-char-face
        ((t (:inherit ace-jump-face-foreground :height 3.0)))))
        ))
    #+END_SRC
** Evil mode
    Install Evil and disable "C-i" to jump forward to restore TAB functionality in Org mode. undo-tree is also used to give Evil mode Vim style undo.
    #+BEGIN_SRC emacs-lisp
    (use-package evil
        :init (setq evil-want-C-i-jump nil)
        :config (evil-mode))

    (use-package undo-tree
        :ensure t
        :after evil
        :diminish
        :config
        (evil-set-undo-system 'undo-tree)
        (global-undo-tree-mode 1))
    #+END_SRC
* Interface changes
** The startup screen is disabled.
    #+BEGIN_SRC emacs-lisp
    (setq inhibit-startup-message t)
    #+END_SRC
** The menubar, toolbar, and scrollbar are all disabled
    #+BEGIN_SRC emacs-lisp
    (menu-bar-mode -1)
    (scroll-bar-mode -1)
    (tool-bar-mode -1)
    #+END_SRC
** y/n work instead of yes/no
    #+BEGIN_SRC emacs-lisp
    (fset 'yes-or-no-p 'y-or-n-p)
    #+END_SRC
** Disable the audible bell
    #+BEGIN_SRC emacs-lisp
    (setq ring-bell-function 'ignore)
    #+END_SRC
** higlight the current line
    #+BEGIN_SRC emacs-lisp
    (global-hl-line-mode 1)
    #+END_SRC
** Themes
*** zenburn
    #+BEGIN_SRC emacs-lisp
    (use-package zenburn-theme
    :ensure t)

    (load-theme 'zenburn t)
    #+END_SRC
* Org-Mode
** org-bullets
    Give Org-mode nicer bullets
    #+BEGIN_SRC emacs-lisp
    (use-package org-bullets
    :ensure t
    :config
    (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))
    #+END_SRC
* Misc
** try
    try will allow packages to be used without actually installing them
    #+BEGIN_SRC emacs-lisp
    (use-package try
    :ensure t)
    #+END_SRC
** which-key
which-key enables help pop-up window for incomplete key-sequences
#+BEGIN_SRC emacs-lisp
    (use-package which-key
      :ensure t
      :config (which-key-mode))
#+END_SRC
** auto-complete
    auto-completion engine
    #+BEGIN_SRC emacs-lisp
    (use-package auto-complete
    :ensure t
    :init
    (progn
    (ac-config-default)
    (global-auto-complete-mode t)
    ))
    #+END_SRC
** ido
    ido flexible matching
    #+BEGIN_SRC emacs-lisp
    (setq ido-enable-flex-matching t)
    (setq ido-everywhere t)
    (ido-mode 1)
    #+END_SRC
* Snippets
** yasnippet
    #+BEGIN_SRC emacs-lisp
    (use-package yasnippet
    :ensure t
    :init (yas-global-mode 1))
    (use-package yasnippet-snippets
    :ensure t)
    #+END_SRC
