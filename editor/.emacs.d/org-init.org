#+STARTUP: overview

* Navigation
** avy
    avy is a GNU Emacs package for jumping to visible text using a char-based decision tree. To search the buffer with avy use "M-s".
    #+BEGIN_SRC emacs-lisp
      (use-package avy
	:ensure t
	:bind ("M-s" . avy-goto-char))
    #+END_SRC
** ace-window
    ace-window is a package to jump between nubered windows with "C-x o" when at least three windows are open.
    #+BEGIN_SRC emacs-lisp
      (use-package ace-window
	:ensure t
	:init
	(progn
	  (global-set-key [remap other-window] 'ace-window)
	  ;; Make the numbers larger
	  (custom-set-faces
	   '(aw-leading-char-face
	     ((t (:inherit ace-jump-face-foreground :height 3.0)))))
	  ))
    #+END_SRC
** Evil mode
    Install Evil and disable "C-i" to jump forward to restore TAB functionality in Org mode. undo-tree is also used to give Evil mode Vim style undo.
    #+BEGIN_SRC emacs-lisp
      (use-package evil
	:ensure t
	:init (setq evil-want-C-i-jump nil)
	:config (evil-mode 1))

      (use-package undo-tree
	:ensure t
	:after evil
	:diminish
	:config
	(evil-set-undo-system 'undo-tree)
	(global-undo-tree-mode 1))
    #+END_SRC
** Custom Key Bindings
    #+BEGIN_SRC emacs-lisp
      (add-hook 'org-mode-hook
		(lambda ()
		  (local-set-key (kbd "C-c e") 'org-edit-src-code)))
    #+END_SRC
* Interface changes
** The startup screen is disabled.
    #+BEGIN_SRC emacs-lisp
    (setq inhibit-startup-message t)
    #+END_SRC
** The menubar, toolbar, and scrollbar are all disabled
    #+BEGIN_SRC emacs-lisp
    (menu-bar-mode -1)
    (scroll-bar-mode -1)
    (tool-bar-mode -1)
    #+END_SRC
** y/n work instead of yes/no
    #+BEGIN_SRC emacs-lisp
    (fset 'yes-or-no-p 'y-or-n-p)
    #+END_SRC
** Disable the audible bell
    #+BEGIN_SRC emacs-lisp
    (setq ring-bell-function 'ignore)
    #+END_SRC
** higlight the current line
    #+BEGIN_SRC emacs-lisp
    (global-hl-line-mode 1)
    #+END_SRC
** Default size
    #+BEGIN_SRC emacs-lisp
    (set-frame-font "JetBrainsMono Nerd Font 16" nil t)
    #+END_SRC
** Themes
*** zenburn
    #+BEGIN_SRC emacs-lisp
      (use-package zenburn-theme
	:ensure t)

      (load-theme 'zenburn t)
    #+END_SRC
* Org-Mode
** org-bullets
    Give Org-mode nicer bullets
    #+BEGIN_SRC emacs-lisp
      (use-package org-bullets
	:ensure t
	:config
	(add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))
    #+END_SRC
* Misc
** try
    try will allow packages to be used without actually installing them
    #+BEGIN_SRC emacs-lisp
      (use-package try
	:ensure t)
    #+END_SRC
** which-key
    which-key enables help pop-up window for incomplete key-sequences
    #+BEGIN_SRC emacs-lisp
    (use-package which-key
	:ensure t
	:config (which-key-mode))
    #+END_SRC
** auto-complete
    auto-completion engine
    #+BEGIN_SRC emacs-lisp
      (use-package company
	:ensure
	:custom
	(company-idle-delay 0.2) ;; how long to wait until popup
	;; (company-begin-commands nil) ;; uncomment to disable popup
	:bind
	(:map company-active-map
	      ("<tab>". company-select-next)
	      ("TAB". company-select-previous)
	      ("M-<". company-select-first)
	      ("M->". company-select-last))
	(:map company-mode-map
	      ("<tab>". tab-indent-or-complete)
	      ("TAB". tab-indent-or-complete)))
    #+END_SRC
** helm
    #+BEGIN_SRC emacs-lisp
      (use-package helm
	:ensure t
	:demand
	:bind (("M-x" . helm-M-x)
	       ("C-x C-f" . helm-find-files)
	       ("C-x b" . helm-buffers-list)
	       ("C-x c o" . helm-occur))
	:preface (require 'helm-core)
	:config (helm-mode 1))
      (use-package helm-core
	:ensure t
	:after helm)
    #+END_SRC
* Snippets
** yasnippet
    #+BEGIN_SRC emacs-lisp
      (use-package yasnippet
	:ensure t
	:init (yas-global-mode 1)
	:config
	(yas-reload-all)
	(add-hook 'prog-mode-hook 'yas-minor-mode)
	(add-hook 'text-mode-hook 'yas-minor-mode))
      (use-package yasnippet-snippets
	:ensure t)
      ;; Snippet auto-completion
      (defun company-yasnippet-or-completion ()
	(interactive)
	(or (do-yas-expand)
	    (company-complete-common)))

      (defun check-expansion ()
	(save-excursion
	  (if (looking-at "\\_>") t
	    (backward-char 1)
	    (if (looking-at "\\.") t
	      (backward-char 1)
	      (if (looking-at "::") t nil)))))

      (defun do-yas-expand ()
	(let ((yas/fallback-behavior 'return-nil))
	  (yas/expand)))

      (defun tab-indent-or-complete ()
	(interactive)
	(if (minibufferp)
	    (minibuffer-complete)
	  (if (or (not yas/minor-mode)
		  (null (do-yas-expand)))
	      (if (check-expansion)
		  (company-complete-common)
		(indent-for-tab-command)))))
    #+END_SRC
* Rust
** rustic
    #+BEGIN_SRC emacs-lisp
      (use-package rustic
	:ensure
	:bind (:map rustic-mode-map
		    ("M-j" . lsp-ui-imenu)
		    ("M-?" . lsp-find-references)
		    ("C-c C-c l" . flycheck-list-errors)
		    ("C-c C-c a" . lsp-execute-code-action)
		    ("C-c C-c r" . lsp-rename)
		    ("C-c C-c q" . lsp-workspace-restart)
		    ("C-c C-c Q" . lsp-workspace-shutdown)
		    ("C-c C-c s" . lsp-rust-analyzer-status))
	:config
	;; uncomment for less flashiness
	;; (setq lsp-eldoc-hook nil)
	;; (setq lsp-enable-symbol-highlighting nil)
	;; (setq lsp-signature-auto-activate nil)

	;; comment to disable rustfmt on save
	(setq rustic-format-on-save t)
	(add-hook 'rustic-mode-hook 'rk/rustic-mode-hook))

      (defun rk/rustic-mode-hook ()
	;; so that run C-c C-c C-r works without having to confirm, but don't try to
	;; save rust buffers that are not file visiting. Once
	;; https://github.com/brotzeit/rustic/issues/253 has been resolved this should
	;; no longer be necessary.
	(when buffer-file-name
	  (setq-local buffer-save-without-query t))
	(add-hook 'before-save-hook 'lsp-format-buffer nil t))
    #+END_SRC
** lsp
    #+BEGIN_SRC emacs-lisp
      (use-package lsp-mode
	:ensure
	:commands lsp
	:custom
	;; what to use when checking on-save. "check" is default, I prefer clippy
	(lsp-rust-analyzer-cargo-watch-command "clippy")
	(lsp-eldoc-render-all t)
	(lsp-idle-delay 0.6)
	;; enable / disable the hints as you prefer:
	(lsp-rust-analyzer-server-display-inlay-hints t)
	(lsp-rust-analyzer-display-lifetime-elision-hints-enable "skip_trivial")
	(lsp-rust-analyzer-display-chaining-hints t)
	(lsp-rust-analyzer-display-lifetime-elision-hints-use-parameter-names nil)
	(lsp-rust-analyzer-display-closure-return-type-hints t)
	(lsp-rust-analyzer-display-parameter-hints nil)
	(lsp-rust-analyzer-display-reborrow-hints nil)
	:config
	(add-hook 'lsp-mode-hook 'lsp-ui-mode))

      (use-package lsp-ui
	:ensure
	:commands lsp-ui-mode
	:custom
	(lsp-ui-peek-always-show t)
	(lsp-ui-sideline-show-hover t)
	(lsp-ui-doc-enable nil))
    #+END_SRC

** Debugging
    #+BEGIN_SRC emacs-lisp
      (use-package exec-path-from-shell
	:ensure
	:init (exec-path-from-shell-initialize))

      (use-package dap-mode
	:ensure
	:config
	(dap-ui-mode)
	(dap-ui-controls-mode 1)

	(require 'dap-lldb)
	(require 'dap-node)
	(require 'dap-gdb-lldb)
	(require 'dap-cpptools)
	;; installs .extension/vscode
	(dap-gdb-lldb-setup)
	(dap-register-debug-template
	 "Rust::LLDB Run Configuration"
	 (list :type "lldb"
	       :request "launch"
	       :name "LLDB::Run"
	       :gdbpath "rust-lldb"
	       :target nil
	       :cwd nil)))
      (dap-register-debug-template "Rust::GDB Run Configuration"
				   (list :type "gdb"
					 :request "launch"
					 :name "GDB::Run"
					 :gdbpath "rust-gdb"
					 :target nil
					 :cwd nil))
    #+END_SRC
** rust-mode
    #+BEGIN_SRC emacs-lisp
      (use-package rust-mode
	:defer t
	:ensure t
	:init
	(add-hook 'rust-mode-hook
		  (lambda () (setq indent-tabs-mode nil)))
	(setq rust-format-on-save t)
	(add-hook 'rust-mode-hook
		  (lambda () (prettify-symbols-mode)))
	(add-hook 'rust-mode-hook #'lsp)
	:bind (("M-," . rust-compile))
	)
      (use-package flycheck-rust
	:ensure t
	:hook (flycheck-mode-hook . flycheck-rust-setup))
    #+END_SRC 
* Git
** magit
    #+BEGIN_SRC emacs-lisp
      (use-package magit
	:ensure t)
    #+END_SRC
